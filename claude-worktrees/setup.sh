#!/bin/bash

# Claude Worktree Setup Script
# Configures environment for claude-worktree tool usage

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
TOOL_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="${HOME}/.claude-worktree.config"
SHELL_RC=""

print_header() {
    echo -e "\n${BLUE}=== $1 ===${NC}\n"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

# Detect shell configuration file
detect_shell_rc() {
    if [ -n "$ZSH_VERSION" ]; then
        SHELL_RC="${HOME}/.zshrc"
    elif [ -n "$BASH_VERSION" ]; then
        if [ -f "${HOME}/.bashrc" ]; then
            SHELL_RC="${HOME}/.bashrc"
        else
            SHELL_RC="${HOME}/.bash_profile"
        fi
    else
        print_error "Unsupported shell. Please add aliases manually."
        return 1
    fi
    return 0
}

# Check prerequisites
check_prerequisites() {
    print_header "Checking Prerequisites"
    
    local has_errors=false
    
    # Check Git
    if command -v git &> /dev/null; then
        print_success "Git is installed ($(git --version))"
    else
        print_error "Git is not installed. Please install Git first."
        has_errors=true
    fi
    
    # Check for editors
    local found_editor=false
    if command -v cursor &> /dev/null || [ -d "/Applications/Cursor.app" ]; then
        print_success "Cursor editor found"
        found_editor=true
    fi
    
    if command -v code &> /dev/null; then
        print_success "VS Code found"
        found_editor=true
    fi
    
    if ! $found_editor; then
        print_warning "No supported editor found (Cursor or VS Code)"
    fi
    
    if $has_errors; then
        print_error "Please fix the errors above before continuing."
        exit 1
    fi
}

# Create configuration file
create_config() {
    print_header "Creating Configuration"
    
    if [ -f "$CONFIG_FILE" ]; then
        print_warning "Configuration file already exists: $CONFIG_FILE"
        read -p "Overwrite? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_success "Keeping existing configuration"
            return
        fi
    fi
    
    # Determine default editor
    local default_editor="Cursor"
    if ! command -v cursor &> /dev/null && ! [ -d "/Applications/Cursor.app" ]; then
        if command -v code &> /dev/null; then
            default_editor="code"
        fi
    fi
    
    cat > "$CONFIG_FILE" << EOF
# Claude Worktree Configuration
# Generated by setup.sh on $(date)

# Default editor to open worktrees in (Cursor, code, vscode)
EDITOR="${default_editor}"

# Files and folders to copy to new worktrees (space-separated)
FOLDERS_TO_COPY=".env .claude .cursor .agentos"

# Branch naming prefix (optional)
# BRANCH_PREFIX="feature/"

# Automatic cleanup of merged worktrees (true/false)
AUTO_CLEANUP="false"

# Default merge strategy (merge, rebase, squash)
MERGE_STRATEGY="merge"
EOF
    
    print_success "Configuration file created: $CONFIG_FILE"
}

# Install shell functions
install_shell_functions() {
    print_header "Installing Shell Functions"
    
    if ! detect_shell_rc; then
        return 1
    fi
    
    # Check if already installed
    if grep -q "Claude Worktree Functions" "$SHELL_RC" 2>/dev/null; then
        print_warning "Shell functions already installed in $SHELL_RC"
        read -p "Reinstall? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            return
        fi
        # Remove existing installation
        sed -i.bak '/# Claude Worktree Functions START/,/# Claude Worktree Functions END/d' "$SHELL_RC"
    fi
    
    # Add shell functions
    cat >> "$SHELL_RC" << EOF

# Claude Worktree Functions START
# Added by claude-worktrees setup.sh on $(date)

# Create worktree with automatic editor opening
wt() {
    if [ -z "\$1" ]; then
        echo "Usage: wt <branch-name>"
        return 1
    fi
    ${TOOL_DIR}/claude-worktree.sh "\$1"
}

# List all worktrees
wtl() {
    ${TOOL_DIR}/claude-worktree.sh --list
}

# Merge worktree branch
wtm() {
    if [ -z "\$1" ]; then
        ${TOOL_DIR}/merge-worktrees.sh
    else
        ${TOOL_DIR}/merge-worktrees.sh "\$1"
    fi
}

# Show worktree status
wts() {
    ${TOOL_DIR}/worktree-status.sh
}

# Clean up worktrees
wtc() {
    ${TOOL_DIR}/cleanup-worktrees.sh
}

# Add claude-worktrees to PATH (optional)
export PATH="\$PATH:${TOOL_DIR}"

# Claude Worktree Functions END
EOF
    
    print_success "Shell functions installed in $SHELL_RC"
    print_warning "Run 'source $SHELL_RC' or restart your terminal to use the functions"
}

# Setup Claude commands
setup_claude_commands() {
    print_header "Setting up Claude Commands"
    
    local claude_dir="${HOME}/.config/claude/commands"
    if [ ! -d "$claude_dir" ]; then
        print_warning "Claude commands directory not found: $claude_dir"
        read -p "Create directory? (Y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Nn]$ ]]; then
            mkdir -p "$claude_dir"
            print_success "Created Claude commands directory"
        else
            print_warning "Skipping Claude command installation"
            return
        fi
    fi
    
    # Copy slash commands
    if [ -d "${TOOL_DIR}/claude/commands" ]; then
        cp -r "${TOOL_DIR}/claude/commands/"*.md "$claude_dir/" 2>/dev/null || true
        print_success "Claude slash commands installed"
    fi
}

# Create example aliases
create_example_aliases() {
    print_header "Example Aliases"
    
    cat << EOF
You can add these aliases to your shell configuration for even faster access:

alias wtf='wt feature/'
alias wtb='wt bugfix/'
alias wth='wt hotfix/'
alias wtr='wt refactor/'

Example usage:
    wtf user-auth    # Creates feature/user-auth worktree
    wtb issue-123    # Creates bugfix/issue-123 worktree
EOF
}

# Main setup function
main() {
    cat << EOF
${BLUE}Claude Worktree Setup${NC}
=====================

This script will configure your environment for using the Claude Worktree tool.

It will:
1. Check prerequisites (Git, editors)
2. Create a configuration file
3. Install shell functions (wt, wtl, wtm, wts, wtc)
4. Set up Claude slash commands
5. Show example usage

EOF
    
    read -p "Continue with setup? (Y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        print_warning "Setup cancelled"
        exit 0
    fi
    
    check_prerequisites
    create_config
    install_shell_functions
    setup_claude_commands
    
    print_header "Setup Complete!"
    
    cat << EOF
${GREEN}✓ Claude Worktree tool is now configured!${NC}

Quick Start:
1. Source your shell configuration:
   ${YELLOW}source $SHELL_RC${NC}

2. Navigate to a Git repository and create a worktree:
   ${YELLOW}wt feature-awesome${NC}

3. List all worktrees:
   ${YELLOW}wtl${NC}

4. Check worktree status:
   ${YELLOW}wts${NC}

Available Commands:
- ${BLUE}wt <branch>${NC}   : Create new worktree
- ${BLUE}wtl${NC}          : List worktrees
- ${BLUE}wtm [branch]${NC} : Merge worktree
- ${BLUE}wts${NC}          : Show status
- ${BLUE}wtc${NC}          : Clean up worktrees

Configuration: $CONFIG_FILE
Documentation: ${TOOL_DIR}/README.md

EOF
    
    create_example_aliases
}

# Run main function
main "$@"